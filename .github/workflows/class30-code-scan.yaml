name: Class30 Code Scan

on:
  push:
    branches:
      - main
    paths:
      - 'class30/app/**'
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install ruff
        run: |
          pip install ruff

      - name: Run ruff format check
        run: |
          cd class30/app
          ruff format --check .

      - name: Run ruff linting
        run: |
          cd class30/app
          ruff check .

      - name: Fix formatting issues with ruff
        if: failure()
        run: |
          cd class30/app
          ruff format .
          ruff check --fix .

      - name: Commit formatting fixes
        if: failure()
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add class30/app
          git diff --staged --quiet || git commit -m "Auto-fix: Apply ruff formatting"
          git push

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd class30/app
          pip install -r requirements.txt
          pip install pytest

      - name: Run pytest
        run: |
          cd class30/app
          pytest tests/test_app.py -v

  docker-build-and-scan:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd class30/app
          docker build -t flask-calculator:${{ github.sha }} .
          docker tag flask-calculator:${{ github.sha }} flask-calculator:latest

      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --severity HIGH,CRITICAL,MEDIUM flask-calculator:latest

      - name: Run Trivy scan with report
        run: |
          trivy image --format json --output trivy-report.json flask-calculator:latest

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-report.json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build-and-scan]
    if: always()

    steps:
      - name: Check workflow status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Docker Build and Scan: ${{ needs.docker-build-and-scan.result }}"

          if [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.docker-build-and-scan.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi

          echo "All checks passed successfully!"
